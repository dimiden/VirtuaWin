#!/bin/sh -f
# VirtuaWin (virtuawin.sourceforge.net)
# build - VirtuaWin build shell script for MINGW MSYS & Cygwin bash.
#
# Copyright (c) 2006 VirtuaWin (VirtuaWin@home.se)
#
# See the file VirtuaWin.c for copying and conditions.
#
OPTIONS=
LOGFILE=
LOGFILEA=
VWDEBUG=
VWVERBOSE=
MAKEFILE=
while [ ".$1" != "." ]
do
    if [ $1 = "-h" ] ; then
        echo "usage: build [options]"
        echo ""
        echo "Where options can be:-"
        echo "   -C   : Build clean."
        echo "   -d   : For debug build (output is VirtuaWinD.exe)."
        echo "   -h   : For this help page."
        echo "   -l <logfile>"
        echo "        : Set the compile log file."
        echo "   -la <logfile>"
        echo "        : Append the compile log to the given file."
        echo "   -m <makefile>"
        echo "        : Sets the makefile to use where <makefile> can be:-"
        echo "             Makefile     Build using Cygwin, MinGW or Linux GNU GCC"
        echo "             win32v6.mak  Build using MS VC version 6 onwards"
        echo "   -S   : Build clean spotless."
        echo "   -vb  : Build with basic verbosity logging."
        echo "   -vd  : Build with debug verbosity logging (large output)."
        echo "   -vt  : Build with basic verbosity logging with timing information."
        echo ""
        echo "When a verbosity option is used the log file created is c:\VirtuaWin.log"
        echo "If you change the verbosity options used do a clean buiild (build -C) first."
        echo ""
        exit 1
    elif [ $1 = "-C" ] ; then
        OPTIONS=clean
    elif [ $1 = "-d" ] ; then
        VWDEBUG=VirtuaWinD.exe
    elif [ $1 = "-l" ] ; then
        shift
        LOGFILE="$1"
    elif [ $1 = "-la" ] ; then
        shift
        LOGFILEA="$1"
    elif [ $1 = "-m" ] ; then
        shift
        MAKEFILE=$1
    elif [ $1 = "-S" ] ; then
        OPTIONS=spotless
    elif [ $1 = "-vb" ] ; then
        VWVERBOSE="$VWVERBOSE vwVERBOSEB=1"
    elif [ $1 = "-vd" ] ; then
        VWVERBOSE="$VWVERBOSE vwVERBOSED=1"
    elif [ $1 = "-vt" ] ; then
        VWVERBOSE="$VWVERBOSE vwVERBOSET=1"
    else
        echo "Error: Unkown option $1, run build -h for help"
        echo ""
        exit 1
    fi
    shift
done

MAKE=make
if [ ".$MAKEFILE" = "." ] ; then
    
    # try to detect gcc, if found use it in preference
    if [ "`type gcc | cut -b 1-6`" = "gcc is" ] ; then
        MAKEFILE=Makefile
    fi
    if [ ".$MAKEFILE" = "." ] ; then
        # failed to find gcc, try cl
        if [ "`type cc | cut -b 1-5`" = "cl is" ] ; then
            MAKEFILE=win32v6.mak
            MAKE=nmake
        fi
    fi
    if [ ".$MAKEFILE" = "." ] ; then
        # failed to find MS cl, try Linux MinGW gcc
        if [ "`type i586-mingw32msvc-gcc | cut -b 1-23`" = "i586-mingw32msvc-gcc is" ] ; then
            MAKEFILE=Makefile
        fi
    fi

    if [ ".$MAKEFILE" = "." ] ; then
        echo "Error: Failed to find a compiler (gcc or cl) fix PATH or use -m option"
        exit 1
    fi
else
    if [ "$MAKEFILE" = "win32v6" ] ; then
        MAKE=nmake
    fi
fi

if [ -r $MAKEFILE ] ; then
    if [ ".$OPTIONS" = "." ] ; then
        OPTIONS="$VWDEBUG"
    fi
    if [ ".$LOGFILE" != "." ] ; then
        echo "$MAKE -f $MAKEFILE $VWVERBOSE $OPTIONS" > $LOGFILE 2>&1
        $MAKE -f $MAKEFILE $VWVERBOSE $OPTIONS > $LOGFILE 2>&1
    else
        if [ ".$LOGFILEA" != "." ] ; then
            echo "$MAKE -f $MAKEFILE $VWVERBOSE $OPTIONS" >> $LOGFILEA 2>&1
            $MAKE -f $MAKEFILE $VWVERBOSE $OPTIONS >> $LOGFILEA 2>&1
        else
            echo "$MAKE -f $MAKEFILE $VWVERBOSE $OPTIONS"
            $MAKE -f $MAKEFILE $VWVERBOSE $OPTIONS
        fi
    fi
else
    echo "Error: Failed to find the makefile $MAKEFILE"
fi
